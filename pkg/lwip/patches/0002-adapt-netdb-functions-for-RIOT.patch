From 51eb852671389157892781db7f80c39894d39996 Mon Sep 17 00:00:00 2001
From: Hendrik van Essen <hendrik.ve@fu-berlin.de>
Date: Tue, 15 Jun 2021 22:05:13 +0200
Subject: [PATCH] adapt netdb functions for RIOT

---
 src/api/netdb.c                  | 23 ++++++++++-------------
 src/include/lwip/inet.h          | 28 ++++++++++++++++++++++++++++
 src/include/lwip/netdb.h         | 19 ++++---------------
 src/include/lwip/priv/memp_std.h |  4 ++--
 4 files changed, 44 insertions(+), 30 deletions(-)

diff --git a/src/api/netdb.c b/src/api/netdb.c
index 87714259..4abd26e8 100644
--- a/src/api/netdb.c
+++ b/src/api/netdb.c
@@ -37,7 +37,7 @@
 
 #include "lwip/netdb.h"
 
-#if LWIP_DNS && LWIP_SOCKET
+#if LWIP_NETDB
 
 #include "lwip/err.h"
 #include "lwip/mem.h"
@@ -49,6 +49,8 @@
 #include <string.h> /* memset */
 #include <stdlib.h> /* atoi */
 
+#include "net/sock/dns.h"
+
 /** helper struct for gethostbyname_r to access the char* buffer */
 struct gethostbyname_r_helper {
   ip_addr_t *addr_list[2];
@@ -86,7 +88,6 @@ int h_errno;
 struct hostent *
 lwip_gethostbyname(const char *name)
 {
-  err_t err;
   ip_addr_t addr;
 
   /* buffer variables for lwip_gethostbyname() */
@@ -97,8 +98,8 @@ lwip_gethostbyname(const char *name)
   HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];
 
   /* query host IP address */
-  err = netconn_gethostbyname(name, &addr);
-  if (err != ERR_OK) {
+  int res = sock_dns_query(name, &addr, AF_INET);
+  if (res < 0) {
     LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
     h_errno = HOST_NOT_FOUND;
     return NULL;
@@ -162,7 +163,6 @@ int
 lwip_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                      size_t buflen, struct hostent **result, int *h_errnop)
 {
-  err_t err;
   struct gethostbyname_r_helper *h;
   char *hostname;
   size_t namelen;
@@ -197,8 +197,8 @@ lwip_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
   hostname = ((char *)h) + sizeof(struct gethostbyname_r_helper);
 
   /* query host IP address */
-  err = netconn_gethostbyname(name, &h->addr);
-  if (err != ERR_OK) {
+  int res = sock_dns_query(name, &h->addr, AF_INET);
+  if (res < 0) {
     LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
     *h_errnop = HOST_NOT_FOUND;
     return -1;
@@ -269,7 +269,6 @@ int
 lwip_getaddrinfo(const char *nodename, const char *servname,
                  const struct addrinfo *hints, struct addrinfo **res)
 {
-  err_t err;
   ip_addr_t addr;
   struct addrinfo *ai;
   struct sockaddr_storage *sa = NULL;
@@ -334,8 +333,8 @@ lwip_getaddrinfo(const char *nodename, const char *servname,
         type = NETCONN_DNS_IPV6;
       }
 #endif /* LWIP_IPV4 && LWIP_IPV6 */
-      err = netconn_gethostbyname_addrtype(nodename, &addr, type);
-      if (err != ERR_OK) {
+      int res = sock_dns_query(nodename, &addr, ai_family);
+      if (res < 0) {
         return EAI_FAIL;
       }
     }
@@ -374,7 +373,6 @@ lwip_getaddrinfo(const char *nodename, const char *servname,
     /* set up sockaddr */
     inet6_addr_from_ip6addr(&sa6->sin6_addr, ip_2_ip6(&addr));
     sa6->sin6_family = AF_INET6;
-    sa6->sin6_len = sizeof(struct sockaddr_in6);
     sa6->sin6_port = lwip_htons((u16_t)port_nr);
     sa6->sin6_scope_id = ip6_addr_zone(ip_2_ip6(&addr));
     ai->ai_family = AF_INET6;
@@ -385,7 +383,6 @@ lwip_getaddrinfo(const char *nodename, const char *servname,
     /* set up sockaddr */
     inet_addr_from_ip4addr(&sa4->sin_addr, ip_2_ip4(&addr));
     sa4->sin_family = AF_INET;
-    sa4->sin_len = sizeof(struct sockaddr_in);
     sa4->sin_port = lwip_htons((u16_t)port_nr);
     ai->ai_family = AF_INET;
 #endif /* LWIP_IPV4 */
@@ -411,4 +408,4 @@ lwip_getaddrinfo(const char *nodename, const char *servname,
   return 0;
 }
 
-#endif /* LWIP_DNS && LWIP_SOCKET */
+#endif /* LWIP_NETDB */
diff --git a/src/include/lwip/inet.h b/src/include/lwip/inet.h
index 2982a0f4..7fd2d0cc 100644
--- a/src/include/lwip/inet.h
+++ b/src/include/lwip/inet.h
@@ -55,6 +55,7 @@ extern "C" {
 typedef u32_t in_addr_t;
 #endif
 
+#ifndef MODULE_POSIX_INET
 struct in_addr {
   in_addr_t s_addr;
 };
@@ -66,16 +67,21 @@ struct in6_addr {
   } un;
 #define s6_addr  un.u8_addr
 };
+#endif /* MODULE_POSIX_INET */
 
 /** 255.255.255.255 */
 #define INADDR_NONE         IPADDR_NONE
 /** 127.0.0.1 */
 #define INADDR_LOOPBACK     IPADDR_LOOPBACK
 /** 0.0.0.0 */
+
+#ifndef MODULE_POSIX_INET
 #define INADDR_ANY          IPADDR_ANY
 /** 255.255.255.255 */
 #define INADDR_BROADCAST    IPADDR_BROADCAST
+#endif /* MODULE_POSIX_INET */
 
+#ifndef MODULE_POSIX_INET
 /** This macro can be used to initialize a variable of type struct in6_addr
     to the IPv6 wildcard address. */
 #define IN6ADDR_ANY_INIT {{{0,0,0,0}}}
@@ -83,6 +89,8 @@ struct in6_addr {
     to the IPv6 loopback address. */
 #define IN6ADDR_LOOPBACK_INIT {{{0,0,0,PP_HTONL(1)}}}
 /** This variable is initialized by the system to contain the wildcard IPv6 address. */
+#endif /* MODULE_POSIX_INET */
+
 extern const struct in6_addr in6addr_any;
 
 /* Definitions of the bits in an (IPv4) Internet address integer.
@@ -144,6 +152,25 @@ extern const struct in6_addr in6addr_any;
 #endif /* LWIP_IPV4 */
 
 #if LWIP_IPV6
+
+#ifdef MODULE_POSIX_INET
+#define inet6_addr_from_ip6addr(target_in6addr, source_ip6addr) {(target_in6addr)->s6_addr[0] = ((source_ip6addr)->addr[0] & 0x000000ff) >> 0; \
+                                                                 (target_in6addr)->s6_addr[1] = ((source_ip6addr)->addr[0] & 0x0000ff00) >> 8; \
+                                                                 (target_in6addr)->s6_addr[2] = ((source_ip6addr)->addr[0] & 0x00ff0000) >> 16; \
+                                                                 (target_in6addr)->s6_addr[3] = ((source_ip6addr)->addr[0] & 0xff000000) >> 24; \
+                                                                 (target_in6addr)->s6_addr[4] = ((source_ip6addr)->addr[1] & 0x000000ff) >> 0; \
+                                                                 (target_in6addr)->s6_addr[5] = ((source_ip6addr)->addr[1] & 0x0000ff00) >> 8; \
+                                                                 (target_in6addr)->s6_addr[6] = ((source_ip6addr)->addr[1] & 0x00ff0000) >> 16; \
+                                                                 (target_in6addr)->s6_addr[7] = ((source_ip6addr)->addr[1] & 0xff000000) >> 24; \
+                                                                 (target_in6addr)->s6_addr[8] = ((source_ip6addr)->addr[2] & 0x000000ff) >> 0; \
+                                                                 (target_in6addr)->s6_addr[9] = ((source_ip6addr)->addr[2] & 0x0000ff00) >> 8; \
+                                                                 (target_in6addr)->s6_addr[10] = ((source_ip6addr)->addr[2] & 0x00ff0000) >> 16; \
+                                                                 (target_in6addr)->s6_addr[11] = ((source_ip6addr)->addr[2] & 0xff000000) >> 24; \
+                                                                 (target_in6addr)->s6_addr[12] = ((source_ip6addr)->addr[3] & 0x000000ff) >> 0; \
+                                                                 (target_in6addr)->s6_addr[13] = ((source_ip6addr)->addr[3] & 0x0000ff00) >> 8; \
+                                                                 (target_in6addr)->s6_addr[14] = ((source_ip6addr)->addr[3] & 0x00ff0000) >> 16; \
+                                                                 (target_in6addr)->s6_addr[15] = ((source_ip6addr)->addr[3] & 0xff000000) >> 24; }
+#else
 #define inet6_addr_from_ip6addr(target_in6addr, source_ip6addr) {(target_in6addr)->un.u32_addr[0] = (source_ip6addr)->addr[0]; \
                                                                  (target_in6addr)->un.u32_addr[1] = (source_ip6addr)->addr[1]; \
                                                                  (target_in6addr)->un.u32_addr[2] = (source_ip6addr)->addr[2]; \
@@ -153,6 +180,7 @@ extern const struct in6_addr in6addr_any;
                                                                  (target_ip6addr)->addr[2] = (source_in6addr)->un.u32_addr[2]; \
                                                                  (target_ip6addr)->addr[3] = (source_in6addr)->un.u32_addr[3]; \
                                                                  ip6_addr_clear_zone(target_ip6addr);}
+#endif /* MODULE_POSIX_INET */
 
 /* directly map this to the lwip internal functions */
 #define inet6_aton(cp, addr)            ip6addr_aton(cp, (ip6_addr_t*)addr)
diff --git a/src/include/lwip/netdb.h b/src/include/lwip/netdb.h
index d3d15dfa..03a4d663 100644
--- a/src/include/lwip/netdb.h
+++ b/src/include/lwip/netdb.h
@@ -36,7 +36,9 @@
 
 #include "lwip/opt.h"
 
-#if LWIP_DNS && LWIP_SOCKET
+#if LWIP_NETDB
+
+#include <arpa/inet.h>
 
 #include "lwip/arch.h"
 #include "lwip/inet.h"
@@ -128,23 +130,10 @@ int lwip_getaddrinfo(const char *nodename,
        const struct addrinfo *hints,
        struct addrinfo **res);
 
-#if LWIP_COMPAT_SOCKETS
-/** @ingroup netdbapi */
-#define gethostbyname(name) lwip_gethostbyname(name)
-/** @ingroup netdbapi */
-#define gethostbyname_r(name, ret, buf, buflen, result, h_errnop) \
-       lwip_gethostbyname_r(name, ret, buf, buflen, result, h_errnop)
-/** @ingroup netdbapi */
-#define freeaddrinfo(addrinfo) lwip_freeaddrinfo(addrinfo)
-/** @ingroup netdbapi */
-#define getaddrinfo(nodname, servname, hints, res) \
-       lwip_getaddrinfo(nodname, servname, hints, res)
-#endif /* LWIP_COMPAT_SOCKETS */
-
 #ifdef __cplusplus
 }
 #endif
 
-#endif /* LWIP_DNS && LWIP_SOCKET */
+#endif /* LWIP_NETDB */
 
 #endif /* LWIP_HDR_NETDB_H */
diff --git a/src/include/lwip/priv/memp_std.h b/src/include/lwip/priv/memp_std.h
index 669ad4d7..a03e55b6 100644
--- a/src/include/lwip/priv/memp_std.h
+++ b/src/include/lwip/priv/memp_std.h
@@ -102,9 +102,9 @@ LWIP_MEMPOOL(IGMP_GROUP,     MEMP_NUM_IGMP_GROUP,      sizeof(struct igmp_group)
 LWIP_MEMPOOL(SYS_TIMEOUT,    MEMP_NUM_SYS_TIMEOUT,     sizeof(struct sys_timeo),      "SYS_TIMEOUT")
 #endif /* LWIP_TIMERS && !LWIP_TIMERS_CUSTOM */
 
-#if LWIP_DNS && LWIP_SOCKET
+#if LWIP_NETDB
 LWIP_MEMPOOL(NETDB,          MEMP_NUM_NETDB,           NETDB_ELEM_SIZE,               "NETDB")
-#endif /* LWIP_DNS && LWIP_SOCKET */
+#endif /* LWIP_NETDB */
 #if LWIP_DNS && DNS_LOCAL_HOSTLIST && DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 LWIP_MEMPOOL(LOCALHOSTLIST,  MEMP_NUM_LOCALHOSTLIST,   LOCALHOSTLIST_ELEM_SIZE,       "LOCALHOSTLIST")
 #endif /* LWIP_DNS && DNS_LOCAL_HOSTLIST && DNS_LOCAL_HOSTLIST_IS_DYNAMIC */
-- 
2.25.1

